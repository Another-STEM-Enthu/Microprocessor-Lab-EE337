ORG 0H
MOV R3, 60H		//dimension of matrix
MOV R0, #61H	//location of (1,1)
MOV R2, #03H
MOV R5, #02H
MOV R6, #1
MOV R7, #2
SJMP compare

incr6 : INC R6
MOV A, #04H
SUBB A, R6
JZ tapout

compare : MOV A, R3
MOV B, R6
DEC B
MUL AB
ADD A, R7
ADD A, #60H

//if (a,b), then do : (m-1)*(b-a) + present and compare; m is dim of matrix

MOV R1,A	//present mem loc
MOV A, R7	//now do R7 mod R3
MOV B, R3
DIV AB
MOV R4,B // R4 now has the correct index for column, repeat for B
MOV A, #00H
CLR C
SUBB A,B
JNZ proceed
MOV R4, #03H

proceed : MOV A, R6	//now do R7 mod R3
MOV B, R3
DIV AB // B now has the correct index

//to check if R6 was 03H
MOV A, #00H
CLR C
SUBB A,B
JNZ proceed2
MOV B, #03H

proceed2 : MOV A, R4
CLR C
SUBB A, B	//if carry is one here, we must skip this comparison as it's already done once before
JC dontb_a
MOV B, R3
DEC B
MUL AB
MOV B, R1
ADD A, B
MOV R0, A
MOV A, @R0
MOV B, @R1
CLR C
SUBB A,B
JNZ notsym

dontb_a : INC R7
MOV A, #04H
SUBB A, R7
JNZ continue1
MOV R7, #01H

continue1 : DJNZ R5, compare
MOV R5, 03H
DJNZ R2, incr6

tapout : CLR A

sym : MOV 59H, #0FFH
SJMP endit
notsym : MOV 59H, #11H

endit : CLR C
END
	
	
// 1,1 1,2 1,3 1,4 2,1 2,2 2,3 2,4 3,1 3,2 3,3 3,4 4,1 4,2 4,3 4,4
// 1,1 1,2 1,3 2,1 2,2 2,3 3,1 3,2 3,3